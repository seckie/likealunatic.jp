<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>XHTML &#8211; Like@Lunatic</title>
	<atom:link href="/tag/xhtml/feed" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Naoki Sekiguchi&#039;s personal Web site.</description>
	<lastBuildDate>Wed, 01 Jan 2025 10:20:54 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.5</generator>

<image>
	<url>/wp-content/uploads/2021/01/cropped-og-32x32.png</url>
	<title>XHTML &#8211; Like@Lunatic</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>『Web標準の教科書―XHTMLとCSSでつくる“正しい”Webサイト』</title>
		<link>/2007/05/05_webstandardstextbook</link>
		
		<dc:creator><![CDATA[seckie]]></dc:creator>
		<pubDate>Thu, 03 May 2007 09:04:33 +0000</pubDate>
				<category><![CDATA[Book Review]]></category>
		<category><![CDATA[CSS]]></category>
		<category><![CDATA[XHTML]]></category>
		<category><![CDATA[書評]]></category>
		<guid isPermaLink="false">/wptest/2007/05/%e3%80%8eweb%e6%a8%99%e6%ba%96%e3%81%ae%e6%95%99%e7%a7%91%e6%9b%b8%e2%80%95xhtml%e3%81%a8css%e3%81%a7%e3%81%a4%e3%81%8f%e3%82%8b%e2%80%9c%e6%ad%a3%e3%81%97%e3%81%84%e2%80%9dweb%e3%82%b5%e3%82%a4.php</guid>

					<description><![CDATA[CYBER@GARDEN の益子貴寛氏が執筆した XHTML + CSS リファレンス本。2005年7月20日、第1版第1刷発行。 仕様に従った XHTML + CSS のコーディング、つまり Web 標準的なコーディングの大切さを教えてくれた本書は、コーダーとしての私のバイブルとなっています。 ブラウザで見る際の視覚的な結果からマークアップする要素を決定するのではなく、文章構造上妥当である要素を選択しマークアップしていくという考え方。今の日本の Web 業界にこういった Web 標準的な考え方を一般化するにあたり、本書はその一翼を担っていると私は確信しています。私はもし本書に出会わなかったら、コーダーになっていなかったかもしれません。 本書の内容では特に CSS のリファレンスが素晴らしく、各プロパティごとに「値・規定値・適用対象要素・継承するかしないか・パーセンテージ・メディア・未対応ブラウザ」といった項目が表にまとめられ、分かりやすい例を挙げながら解説されています。 XHTML の方も要素ごとに「書くことができる属性・含むことができる要素」などを詳しくまとめてあったらなお良いのでは・・・と思ってはいますが、要素ごとのマークアップ例は秀逸で、非常に参考になります。 600ページを越える書籍であるだけに、私は全てのページに目を通したわけではないのですが、必要となった時に必要とする項目だけを索引から引くという、辞書的な使い方をしています。コーディングをする上で手放せないものとなっていますので、会社用と自宅用で2冊持っていたりします。コーダー必携の1冊と言えるでしょう。 CYBER@GARDEN 『Web標準の教科書』紹介ページ Amazon で『Web標準の教科書―XHTMLとCSSでつくる“正しい”Webサイト』を見る]]></description>
										<content:encoded><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4798010928?ie=UTF8&amp;tag=likealunatic-22&amp;linkCode=as2&amp;camp=247&amp;creative=1211&amp;creativeASIN=4798010928"><img decoding="async" src="/img/2007/05/03_webstandardstextbook.jpg" alt="写真: 『Web標準の教科書』" width="120" height="160" class="introphoto" /></a>
<a href="http://www.cybergarden.net/">CYBER@GARDEN</a> の益子貴寛氏が執筆した
<abbr title="Extensible HyperText Markup Language">XHTML</abbr> + <abbr title="Cascading Style Sheets">CSS</abbr> リファレンス本。2005年7月20日、第1版第1刷発行。</p>

<p>仕様に従った <abbr title="Extensible HyperText Markup Language">XHTML</abbr> + <abbr title="Cascading Style Sheets">CSS</abbr> のコーディング、つまり Web 標準的なコーディングの大切さを教えてくれた本書は、コーダーとしての私のバイブルとなっています。</p>

<p>ブラウザで見る際の視覚的な結果からマークアップする要素を決定するのではなく、文章構造上妥当である要素を選択しマークアップしていくという考え方。今の日本の Web 業界にこういった Web 標準的な考え方を一般化するにあたり、本書はその一翼を担っていると私は確信しています。私はもし本書に出会わなかったら、コーダーになっていなかったかもしれません。</p>

<p>本書の内容では特に <abbr title="Cascading Style Sheets">CSS</abbr> のリファレンスが素晴らしく、各プロパティごとに「値・規定値・適用対象要素・継承するかしないか・パーセンテージ・メディア・未対応ブラウザ」といった項目が表にまとめられ、分かりやすい例を挙げながら解説されています。<br />
<abbr title="Extensible HyperText Markup Language">XHTML</abbr> の方も要素ごとに「書くことができる属性・含むことができる要素」などを詳しくまとめてあったらなお良いのでは・・・と思ってはいますが、要素ごとのマークアップ例は秀逸で、非常に参考になります。</p>

<p>600ページを越える書籍であるだけに、私は全てのページに目を通したわけではないのですが、必要となった時に必要とする項目だけを索引から引くという、辞書的な使い方をしています。コーディングをする上で手放せないものとなっていますので、会社用と自宅用で2冊持っていたりします。コーダー必携の1冊と言えるでしょう。</p>

<ul class="disclist">
<li><a href="http://www.cybergarden.net/webstandards/campaign.html">CYBER@GARDEN 『Web標準の教科書』紹介ページ</a></li>
<li><a href="http://www.amazon.co.jp/gp/product/4798010928?ie=UTF8&amp;tag=likealunatic-22&amp;linkCode=as2&amp;camp=247&amp;creative=1211&amp;creativeASIN=4798010928">Amazon で『Web標準の教科書―XHTMLとCSSでつくる“正しい”Webサイト』を見る</a><img decoding="async" src="http://www.assoc-amazon.jp/e/ir?t=likealunatic-22&amp;l=as2&amp;o=9&amp;a=4798010928" width="1" height="1" alt="" /></li>
</ul>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>段組レイアウトのお約束：段組ボックスの底辺を揃える（揃っているように見せる）</title>
		<link>/2007/04/04_column_layout</link>
					<comments>/2007/04/04_column_layout#comments</comments>
		
		<dc:creator><![CDATA[seckie]]></dc:creator>
		<pubDate>Tue, 03 Apr 2007 13:38:01 +0000</pubDate>
				<category><![CDATA[Web Design]]></category>
		<category><![CDATA[CSS]]></category>
		<category><![CDATA[Layout]]></category>
		<category><![CDATA[XHTML]]></category>
		<guid isPermaLink="false">/wptest/2007/04/%e6%ae%b5%e7%b5%84%e3%83%ac%e3%82%a4%e3%82%a2%e3%82%a6%e3%83%88%e3%81%ae%e3%81%8a%e7%b4%84%e6%9d%9f%ef%bc%9a%e6%ae%b5%e7%b5%84%e3%83%9c%e3%83%83%e3%82%af%e3%82%b9%e3%81%ae%e5%ba%95%e8%be%ba%e3%82%92.php</guid>

					<description><![CDATA[使い古されたネタで申し訳ないのですが、自分が復習するという意味も含め、CSSで段組レイアウトをする際のお約束をまとめてみることにしました。まず第一回は「段組ボックスの底辺を揃える（揃っているように見せる）」です。 <a href="/2007/04/04_column_layout">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
										<content:encoded><![CDATA[<p>使い古されたネタで申し訳ないのですが、自分が復習するという意味も含め、<abbr title="Cascading Style Sheet">CSS</abbr>で段組レイアウトをする際のお約束をまとめてみることにしました。まず第一回は「段組ボックスの底辺を揃える（揃っているように見せる）」です。</p>

<p>以下の画像のような見た目の段組を、実現することを目標とします。</p>

<p class="example"><img fetchpriority="high" decoding="async" src="/img/2007/04/04_img01.gif" alt="目標とする段組レイアウト図" width="354" height="250" /></p>

<p>普通に考えると、float を使って横に並べたボックス各々に border を適用したくなります。が、このやり方ですと各ボックスの内容量が異なる場合、各々の高さが異なってしまい、ボックスの底辺が揃わなくなります。このように。</p>

<p class="example"><img loading="lazy" decoding="async" src="/img/2007/04/04_img02.gif" alt="各段組ボックスの底辺が揃わないの図" width="354" height="250" /></p>

<p>そこで、border を使わずに目標の見た目を実現します。</p>

<p class="memo">以下に示す方法は、例として2カラムの段組を取り上げていますが、3カラム以上の段組でも同じように利用することができます。ただし、横幅固定デザインでのみ有効です。リキッドレイアウトやエラスティックレイアウトでは手法を変えないと利用できません。</p>

<p>まず以下のような画像を作り、スライスを切ります。</p>

<p class="example"><img loading="lazy" decoding="async" src="/img/2007/04/04_img03.gif" alt="作成する画像と、それにスライスを切った図" width="354" height="250" /></p>

<p>緑色の部分がスライスと思ってください。段組中段の部分を実現するためのスライスと、段組底辺を実現するためのスライスです。わかりやすいように高さ10ピクセル程度のスライスにしていますが、実際は中段部分は高さ1ピクセル、底辺は線の太さと同じで大丈夫です。</p>

<p>で、次のようなソースを書きます。あくまで一例です。</p>

<div class="section">
<h3><abbr title="Extensive HyperText Markup Language">XHTML</abbr>のコード</h3>
<pre><code>&lt;div id="container"&gt;
&lt;div class="section" id="columnAlpha"&gt;
&lt;h2&gt;コラムA&lt;/h2&gt;
&lt;p&gt;サンプルテキストサンプルテキストサンプルテキスト...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="columnBeta"&gt;
&lt;h2>コラムB&lt;/h2&gt;
&lt;p&gt;サンプルテキストサンプルテキストサンプルテキスト...&lt;/p&gt;
&lt;/div&gt;
&lt;p id="containerBtm"&gt;&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;</code></pre>
</div>

<div class="section">
<h3><abbr title="Cascading Style Sheet">CSS</abbr>のコード</h3>
<pre><code>div#container {background:url(中段部分の画像.gif) repeat-y;}
div#columnAlpha {
float: left;
width: 162px;
border-top: 2px solid #339;
margin-right: 10px;
}
div#columnBeta {
float: left;
width: 162px;
border-top: 2px solid #339;
}
p#containerBtm {
clear: both;
height: 2px;
background: url(底辺部分の画像.gif) no-repeat bottom;
font-size: 2px;
line-height: 2px;
}</code></pre>
</div>

<p>段組しているボックスには上辺のみ border を指定し、親のコンテナボックスに対して段組中段部分の画像をY軸リピートで指定します。そして、段組ボックスの直後に、底辺となる p#containerBtm を挿入し clear:both と、底辺部分の画像を背景に指定します。height と font-size、line-height の指定は、このボックスを底辺画像の高さピッタリにするためのものです。</p>

<p>p#containerBtm にあたるものは、clear ができてかつ底辺画像が表示できれば、なんでもいいです。底辺画像は背景ではなくて、img 要素で埋め込んでも構いませんし。p#containerBtm 自体入れたくない方は、コンテナdivをもうひとつ追加して、そちらに底辺画像を背景で指定 ＆ clearfix を使う、というやり方でもいいです。また、きちんと内容を持っているフッター的なボックスを持ってきてもいいでしょう。</p>

<p>以上のような方法で底辺を「揃っているように見せる」ことができます。（実際は揃ってないです）</p>

<div class="memo">
<p>JavaScriptを使って強引に揃えちゃったサイトを先日、<a href="http://www.projectdd.jp/">はやしさん</a>に教えていただきました。</p>
<p class="ref"><a href="http://www.oks-delica.jp/menu/index.php?action=list&amp;date=2007-3&amp;category=school">オーケーズデリカ株式会社: お弁当</a></p>
<p>お弁当一覧のところです。なんとまあ・・・</p>
</div>

<p>なお、クロスブラウザな表示を実現する際に border は障害となる場合がありますので注意が必要です。この点は <cite><a href="http://adp.daa.jp/archives/000571.html">ADP: ピクセル単位で合わせるところではborderを使わない（IE7でも！）</a></cite> においてよくまとめられています。</p>

<p>段組ボックスでは上辺のみを表現し、親コンテナボックスで中段部分を表現するのがミソですね。この点を抑えて工夫すれば、リキッドレイアウトやエラスティックレイアウトにおいても実現する方法はありそうです。</p>
]]></content:encoded>
					
					<wfw:commentRss>/2007/04/04_column_layout/feed</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
		<item>
		<title>パンくずリストのマークアップ考察</title>
		<link>/2007/03/24_locus_markup</link>
					<comments>/2007/03/24_locus_markup#comments</comments>
		
		<dc:creator><![CDATA[seckie]]></dc:creator>
		<pubDate>Fri, 23 Mar 2007 14:44:52 +0000</pubDate>
				<category><![CDATA[Web Design]]></category>
		<category><![CDATA[Accessibility]]></category>
		<category><![CDATA[XHTML]]></category>
		<guid isPermaLink="false">/wptest/2007/03/%e3%83%91%e3%83%b3%e3%81%8f%e3%81%9a%e3%83%aa%e3%82%b9%e3%83%88%e3%81%ae%e3%83%9e%e3%83%bc%e3%82%af%e3%82%a2%e3%83%83%e3%83%97%e8%80%83%e5%af%9f.php</guid>

					<description><![CDATA[とある案件でパンくずリストをどうやってマークアップするのが最適解なのか悩んでいました。まずどんなブロック要素で囲むか？そして <code>&#62;</code> 部分はどうするか？<code>&#38;gt;</code> というのが真っ先に思いつきますが、これはスマートとは言えないのでは・・・などなど。 <a href="/2007/03/24_locus_markup">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
										<content:encoded><![CDATA[<p>とある案件でパンくずリストをどうやってマークアップするのが最適解なのか悩んでいました。例えば、以下のようなヴィジュアルデザインのパンくずリストをマークアップするとします。</p>

<p class="example"><img loading="lazy" decoding="async" src="/img/2007/03/23_locus_pic.gif" alt="とあるパンくずリストのヴィジュアルデザイン例" width="267" height="20" /></p>

<p>まずどんなブロック要素で囲むか？そして <code>&gt;</code> 部分はどうするか？<code>&amp;gt;</code> というのが真っ先に思いつきますが、これはスマートとは言えないのでは・・・などなど。そこでGoogleで情報検索したところ、次の記事を見つけました。</p>

<p class="presentation"><a href="http://necoze.jugem.cc/?eid=211">日々のネコゼログログ: アクセシブルな「パンくずリスト」</a></p>

<p>こちらの記事によると、<a href="http://www.infoaxia.com/">インフォアクシア</a>の植木さんのインタビューからの抜粋があります。<a href="http://blog.mag2.com/m/log/0000157597/105548485.html">そのインタビューの様子はこちら</a>。アクセシビリティを言い出すと・・・結局はこの人にたどり着くようです。頭が下がります。</p>

<blockquote title="まぐまぐ！『ウェブアクセシビリティ実例見聞録』バックナンバー" cite="http://blog.mag2.com/m/log/0000157597/105548485.html">あとは、試しにやってみているのですが、<em>パンくずリストの間に挟む矢印を画像にして、「の中の」という代替テキストを入れてあります。</em>こうすると例えば「ホームの中のニュース」と読み上げられるので、ユーザーテストでもサイトの階層が分かりやすいとの声をいただいています。

・・・中略・・・

いわゆるパンくずリストは、ユーザーテストをやっていると、画面を見ているユーザーにも意外とその意味が分からないという人が多いんです。確かに、ヘッダーにいきなり「ホーム&gt;&gt;ニュース&gt;&gt;過去記事」なんて書いてあっても初めて見た人はなんだろう？と思いますよね。

<em>そこで、少しでも分かりやすくするために一番最初に「現在位置」と入れてみました。</em></blockquote>

<p>なるほど確かに、インフォアクシアのソースは既にそうなっていました・・・ってそれは本人ですから当たり前ですよね。インフォアクシア式のやり方の他に、私は以下のマークアップを思いつきました。</p>

<pre><code>&lt;dl id="locus"&gt;
&lt;dt&gt;現在位置:&lt;/dt&gt;
&lt;dd&gt;ホーム &lt;img src="/common/img/icon_arrow.gif" alt="の中の" /&gt;&lt;/dd&gt;
&lt;dd&gt;キャンペーン &lt;img src="/common/img/icon_arrow.gif" alt="の中の" /&gt;&lt;/dd&gt;
&lt;dd&gt;おにぎり100円セール&lt;/dd&gt;
&lt;/dl&gt;</code></pre>

<p>dl要素を使用したやり方です。「現在位置」をdt要素に指定しています。ただ、ヴィジュアルデザインの都合上、「現在位置」表示を入れられない場合、どうするか。</p>

<p class="memo">（私の現在の仕事のように、既に決定されているヴィジュアルデザインをコーディングするという作業の場合、デザイナーと事前に打ち合わせておかない限り、ヴィジュアルデザインに「現在位置」表示が入っていることはまずないでしょう。）</p>

<p>こういった場合、dt要素に <code>position:absolute</code> を指定するなどして、画面外に飛ばしてしまいます。通常のブラウザでは見ることができなくとも、音声ブラウザでは読み上げられるはずです。</p>

<p>ただ、不覚にも私は音声ブラウザを利用したことがないので、dl要素を使用したマークアップと、インフォアクシ式のp要素を使用したマークアップが、それぞれどのように読み上げられるかがわかりません。</p>

<p>また、パンくずリストに付ける適切な <abbr title="identification">id</abbr> は何か、こちらもリサーチしてみました。インフォアクシアでは <code>id="breadcrumbs"</code> で「パンくず」をそのまま英語化したものです。また、<a href="http://css-happylife.com/">CSS HappyLife</a>さんの<cite><a href="http://css-happylife.com/log/memo/000100.shtml">こちらの記事（もう、class名やid名で悩まないんだからっ！！）</a></cite>では以下のようなご紹介があります。</p>

<blockquote cite="http://css-happylife.com/log/memo/000100.shtml"><dl class="squarelist"> <dt>パンくずっぽいの</dt> <dd>topicpath</dd> <dd>topic-path</dd> <dd>topicPath</dd> <dd>pan</dd> <dd>pankuzu</dd> </dl></blockquote>

<p>・・・がどれもいまいちピンとこなかったので、その筋のサイトをいくつか続けて見て行ったところ、ありました。カッコイイのが。<a href="http://www.acc04.jp/">アックゼロヨン</a>の <code>id="locus"</code> です。</p>

<p><cite><a href="http://dictionary.www.infoseek.co.jp/">Infoseek マルチ辞書</a></cite>で「locus」をひいてみると <q cite="http://dictionary.www.infoseek.co.jp/">場所, 所在地; 【遺伝】遺伝子座; 【数】軌跡.</q> とあります。これだ！と思いました。</p>

<p>パンくずリストは大概がサイトのメインコンテンツより上にあるものであるだけに、テキトーにマークアップしてしまうのはアクセシビリティの観点から避けたいところです。</p>
]]></content:encoded>
					
					<wfw:commentRss>/2007/03/24_locus_markup/feed</wfw:commentRss>
			<slash:comments>3</slash:comments>
		
		
			</item>
		<item>
		<title>エラスティックレイアウトを採用してみました</title>
		<link>/2007/03/elastic_layout_01</link>
					<comments>/2007/03/elastic_layout_01#comments</comments>
		
		<dc:creator><![CDATA[seckie]]></dc:creator>
		<pubDate>Wed, 21 Mar 2007 10:44:13 +0000</pubDate>
				<category><![CDATA[Web Design]]></category>
		<category><![CDATA[CSS]]></category>
		<category><![CDATA[Layout]]></category>
		<category><![CDATA[XHTML]]></category>
		<guid isPermaLink="false">/wptest/2007/03/%e3%82%a8%e3%83%a9%e3%82%b9%e3%83%86%e3%82%a3%e3%83%83%e3%82%af%e3%83%ac%e3%82%a4%e3%82%a2%e3%82%a6%e3%83%88%e3%82%92%e6%8e%a1%e7%94%a8%e3%81%97%e3%81%a6%e3%81%bf%e3%81%be%e3%81%97%e3%81%9f.php</guid>

					<description><![CDATA[当サイトのレイアウトにはエラスティックレイアウトという手法を使いました。コンテナ要素の幅をem単位で指定しています。 <a href="/2007/03/elastic_layout_01">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
										<content:encoded><![CDATA[<p>当サイトのレイアウトにはエラスティックレイアウトという手法を使いました。コンテナ要素の幅をem単位で指定しています。該当部分の記述は以下の通り。</p>

<pre><code>div#container {
width: 90%;
max-width: 60em;
min-width: 46em;
margin: 0 auto;
}</code></pre>

<p>コンテンツ全体を囲む div#container に対して max-width と min-width をem単位で指定しています。そうすることで、ブラウザで文字サイズを変更すると div#container の幅が変わるようになります。なお、 max-width/min-width プロパティに対応していない<abbr title="Internet Explorer">IE</abbr>6以前などのブラウザでは単に width:90% になるだけです。</p>

<p>また、エラスティックレイアウトで2カラムを実現するためにネガティブマージンをレイアウトに使っています。ネガティブマージンというのは文字通り、マイナス値を指定した margin プロパティのこと。</p>

<pre><code>div#main {
float: left;
width: 100%;
margin: 0 -16em 20px 0;
}
div#sidebar {
float: right;
width: 15em;
margin-bottom: 30px;
}</code></pre>

<p>div#sidebar の幅が15emで、残りの領域は div#main という割り当てとなっています。div#sidebar の width:15em に対して div#main の右 margin:16em 。差分の1emは間のマージン。これだけだと、div#main の右端が div#sidebar に潜ってしまうため、div#main の中身のブロック要素に右 margin を設定します。</p>

<pre><code>div.entry {
margin: 0 16em 30px 0;
}
</code></pre>

<p>これで完成。</p>

<dl class="disclist"> <dt>なお、このレイアウトには以下のサイトを参考にさせていただきました。</dt> <dd><a href="http://2xup.org/log/2006/12/20-0212">2xup.org: 一行あたりの文字数を制限する elastic layout （エラステックレイアウト）</a></dd> <dd><a href="http://adp.daa.jp/archives/000399.html">Alternative Design Project: デザインテンプレート1110とネガティブマージン</a></dd> </dl>
]]></content:encoded>
					
					<wfw:commentRss>/2007/03/elastic_layout_01/feed</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
	</channel>
</rss>
